from state06 import State,AgentResponse
from langchain_groq import ChatGroq
from langchain_core.messages import SystemMessage, AIMessage, HumanMessage
from rich import print
import sqlite3

llm = ChatGroq(model="llama-3.3-70b-versatile", temperature=0.7)

cursor = sqlite3.connect("database.sqlite").cursor()
def get_database_info():
    database=[]
    tables = cursor.execute("SELECT name FROM sqlite_master WHERE type='table';").fetchall()
    for row in tables:
        table_name = row[0]
        temp=[]
        for column in cursor.execute(f"PRAGMA table_info({table_name})"):
            temp.append(column)
        database.append({f"{table_name}":temp})
    return database

analyzer_prompt=f"""\
## Role: Data Analyst in a Research Team  

You are a Data Analyst working within a Research Team that consists of a **Researcher, a Critic, and a Database Tool**.  

### Your Responsibilities:  
- You have access to the **database**, which contains tables and schema information in the format:  
  `{get_database_info()}` → `[table_name: [table_headers(info[])]]`  
- Your task is to **analyze the data and generate reports** based on user requests.  
- You can utilize the **Database Tool** to execute SQL queries and retrieve necessary data.  
- Your reports will be **reviewed by the Critic**, who will provide feedback for improvement.  

### Available Tools:  
1. **Database Tool** → Fetches data by executing SQL queries.  
2. **Critic** → Reviews your report and provides constructive feedback.  

Your goal is to provide clear, concise, and insightful reports based on the available database information. Use the feedback from the Critic to refine your analysis before delivering the final report.
###Example:

# Execute a SQL query to list all table names in the database, then move to the Database agent.
- `SELECT name FROM sqlite_master WHERE type='table';` next=Database

# Execute a SQL query to get the schema information of a specific table, then move to the Database agent.
- `PRAGMA table_info('table_name');` next=Database

# Submit the report to the Critic for review.
- `Your report` next=Critic

# Finalize and conclude the process and deliver the report.
- `Your report` next=END
"""
critic_prompt=f"""\
## Role: Critic in a Research Team  

You are a Critic working within a Research Team that consists of a **Researcher, a Critic, and a Database Tool**.  

### Your Responsibilities:  
- You have access to the **Database Tool**, which contains tables and schema information in the format:  
  `{get_database_info()}` → `[table_name: [table_headers(info[])]]`  
- Your task is to **critique the reports** generated by the Data Analyst.  
- You can utilize the **Database Tool** to execute SQL queries and retrieve necessary data.  
- Your feedback will be **reviewed by the Data Analyst**, who will refine their analysis based on your suggestions.  

### Available Tools:  
1. **Database Tool** → Fetches data by executing SQL queries.  
2. **Data Analyst** → Generates reports based on your feedback.  

Your goal is to provide **constructive feedback** to the Data Analyst. Use your expertise to identify areas for improvement and suggest alternative approaches. ###Example:

- `SELECT name FROM sqlite_master WHERE type='table';` next=Database
  # The Database tool will execute the query and return the results to the Data Analyst.
- `PRAGMA table_info('table_name');` next=Database
  # The Database tool will execute the query and return the schema information of the table to the Data Analyst.
- `Your feedback` next=Analyst
  # The Data Analyst will receive your feedback and refine their report based on your suggestions.
"""

def Analyzer_agent(state: State) -> State:
    print("---Analyzer_agent---")
    if state["criticized"]<2:
        response = llm.with_structured_output(schema=AgentResponse).invoke([SystemMessage(content=analyzer_prompt)]+state["messages"])
    else:
        response = llm.with_structured_output(schema=AgentResponse).invoke([SystemMessage(content=critic_prompt)]+state["messages"]+[HumanMessage(content="Finalize and conclude the process and deliver the report.")])
    print("Analyzer_agent response:", response)
    return {"messages": [AIMessage(content=response.message)], "next": response.next,"pre":"Analyst","criticized":state["criticized"]+1}

def Critic_agent(state: State) -> State:
    print("---Critic_agent---")
    response = llm.with_structured_output(schema=AgentResponse).invoke([SystemMessage(content=critic_prompt)]+state["messages"])
    print("Critic_agent response:", response)
    return {"messages": [AIMessage(content=response.message)], "next": response.next,"pre":"Critic","criticized":state["criticized"]}
def Database_agent(state: State) -> State:
    print("---Database_agent---")
    response =[]
    for message in cursor.execute(str(state["messages"][-1].content)).fetchall():
        response.append(str(message))
    return {"messages": [AIMessage(content=response)], "next": state["pre"],"pre":state["pre"],"criticized":state["criticized"]}