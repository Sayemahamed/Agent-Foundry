from state06 import State, AgentResponse
from langchain_core.messages import (
    SystemMessage,
    AIMessage,
    HumanMessage,
    RemoveMessage,
)
from langgraph.types import Command
from typing import Literal
from rich import print
import sqlite3
from utils import invoke_llm, get_database_info


analyst_prompt: str=f"""
## Role: Data Analyst in a Research Team

You are a **Data Analyst** working within a Research Team that includes a **Critic** and a **Database Tool**. Your task is to analyze data from the database, generate insightful reports, and iteratively improve your analysis based on feedback from the Critic.

**Your response should be structured as follows:** `{AgentResponse.model_json_schema()}` **in Pure JSON, with no other text, not even in Markdown.**

### Your Responsibilities:
- **Data Retrieval:** Access and utilize the database, whose schema is given in the format:  
  `{get_database_info()}` → `[table_name: [table_headers(info[])]]`
- **Generate Reports:** Analyze the data and prepare clear, concise, and actionable reports based on user requests.
- **Utilize Tools Effectively:**  
  - **Database Tool:** Use this tool solely to execute SQL queries and retrieve the required data.  
  - **Critic:** Submit your report for review to receive feedback and suggestions.
- **Iterate and Improve:** Refine your analysis and final report by incorporating the Critic’s feedback.

### Examples:
    
    {{"Message": "PRAGMA table_info('table_name');", "Next": "Database"}},
    {{"Message": "SELECT * FROM table_name;", "Next": "Database"}},
    {{"Message": "SELECT School, \"School Year\", \"Total School Engagement Score\" FROM customer_journey_report ORDER BY \"Total School Engagement Score\" DESC LIMIT 1 OFFSET 2;", "Next": "Database"}},
    {{"Message": "Your report", "Next": "Critic"}},
    {{"Message": "Finalized report.", "Next": "END"}}

**Important Note:**  
When invoking the Database Tool, provide **only the SQL query** without any additional instructions. Ensure your query uses **exact column names** as specified in the provided schema. If a column or table name contains spaces or special characters, enclose it in the proper quotes (e.g., `"School Year"` for SQLite/PostgreSQL or `` `School Year` `` for MySQL). Avoid any extra formatting or comments.
"""

critic_prompt: str = f"""
## Role: Critic in a Research Team

You are a **Critic** in a Research Team that consists of a **Data Analyst**, a **Critic**, and a **Database Tool**. Your main objective is to provide constructive feedback on the reports generated by the Data Analyst, ensuring that all data insights are robust, comprehensive, and clearly communicated.

### Your Responsibilities:
- **Review Reports:** Critically evaluate the reports produced by the Data Analyst using database schema information provided in the format:  
  `{get_database_info()}` → `[table_name: [table_headers(info[])]]`
- **Identify Gaps:** Point out missing perspectives, potential oversights, or areas where additional analysis could be beneficial.
- **Suggest Improvements:** Recommend alternative analytical approaches, extra data points, or enhanced methods to improve clarity and depth.
- **Collaborate:** Ensure that your feedback is actionable and helps the Data Analyst refine their analysis effectively.

**Your response should be structured as follows:** `{AgentResponse.model_json_schema()}` **in Pure JSON, with no other text, not even in Markdown.**

### Examples:

    {{"Message": "The report should include a comparison of trends.", "Next": "Data Analyst"}},
    {{"Message": "The final report should include actionable recommendations.", "Next": "Data Analyst"}}

Your detailed, constructive critique is essential to enhance the quality of the final report.
"""


def Analyzer_agent(state: State) -> Command[Literal["Critic", "Database", "__end__"]]:
    print("---Analyzer_agent---")
    state["criticized"] = state.get("criticized", 0)
    state["pre"]= state.get("pre", "Analyst")
    if state["criticized"] < 2:
        response: AgentResponse = invoke_llm([SystemMessage(content=analyst_prompt)]+state["messages"])
    else:
        response: AgentResponse = invoke_llm(
            [SystemMessage(content=analyst_prompt)]
            + state["messages"]
            + [
                HumanMessage(
                    content="Finalize and conclude the process and deliver the report."
                )
            ]
        )
    if state["pre"] == "Database":
        return Command(
            update={
                "messages": [
                    AIMessage(content=response.Message),
                    RemoveMessage(id=str(state["messages"][-1].id)),
                ],
                "criticized": state["criticized"] + 1 if state["pre"] == "Critic" else 0,
                "pre": "Analyst",
            },
            goto=response.Next,
        )
    return Command(
        update={"messages": [AIMessage(content=response.Message)],"criticized": state["criticized"] + 1 if state["pre"] == "Critic" else 0, state["pre"]: "Analyst"},
        goto=response.Next if response.Next != "END" else "__end__",
    )


def Critic_agent(state: State) -> Command[Literal["Analyst"]]:
    print("-*-"*80)
    print("---Critic_agent---")
    print("-*-"*80)
    response: AgentResponse = invoke_llm(
        [SystemMessage(content=critic_prompt)] + state["messages"]
    )
    return Command(
        update={"messages": [AIMessage(content=response.Message)], "pre": "Critic"},
        goto="Analyst",
    )


def Database(state: State) -> Command[Literal["Analyst"]]:
    print("-*-"*80)
    print("---Database_agent---")
    print("-*-"*80)
    cursor: sqlite3.Cursor = sqlite3.connect("database.sqlite").cursor()
    response = []
    try:
        for message in cursor.execute(str(state["messages"][-1].content)).fetchall():
            response.append(str(message))
    except sqlite3.Error as e:
        response.append(f"Database error: {e}")
    return Command(
        update={"messages": [AIMessage(content=str(response))], "pre": "Database"},
        goto="Analyst",
    )
